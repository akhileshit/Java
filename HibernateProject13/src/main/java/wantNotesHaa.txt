🔍 What is the Criteria API?
The Criteria API allows you to build type-safe, dynamic queries in Hibernate using Java code rather than writing query strings manually (like in HQL or SQL).

Think of it as a way to construct queries programmatically, which is particularly useful when query conditions are dynamic or user-driven.


✅ Key Concepts:
1. CriteriaBuilder
Used to construct criteria queries, expressions, predicates, etc.

2. CriteriaQuery
Represents the overall query structure (like a SELECT in SQL).

3. Root
Represents the entity/table you are querying.

4. Predicate
Represents conditions like WHERE, AND, OR, etc.


Why Use Criteria API?
✅ Type-safe (compile-time error checking)

✅ No need for string-based HQL

✅ Great for dynamic or complex query building

✅ Integrated with JPA standard


Use Cases:
Building dynamic filters (e.g., search forms)

Avoiding SQL injection

Multi-table joins with type safety

Composable queries with reusability


*****************
LEGACY CRITERIA API (not JPA standards):
Why Deprecated?
Not type-safe (errors only show at runtime).

Not part of the JPA standard.

Difficult to maintain for complex queries.

Replaced by CriteriaBuilder and CriteriaQuery for better readability, safety, and IDE support.

✅ When Should You Use It?
Legacy projects (Hibernate 4 or below).

When refactoring is not yet feasible.

Otherwise, prefer JPA Criteria API for new development.
******************


BUT... when it comes to complex querying, Hibernate offers multiple ways to do it — and each comes with trade-offs.
✅ Normal hibernate functions: like save(), persist(), remove().. for simple object persistence
✅ HQL for quick Queries
✅ Criteria API (JPA): for Dynamic and type-safe Queries


🔍 Why This(criteria api) is Better:
✅ Dynamic: Only adds conditions that are needed (e.g., skips minSalary if null).

✅ Type-safe: No typos in column names; refactoring is safer.

✅ Secure: No manual string building → avoids SQL injection.

✅ Maintainable: You can easily add/remove fields with clean Java code.


